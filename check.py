# -*- coding: utf-8 -*-
"""check.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/13VUVTFoD2-lhYBKfRwZ5nFI_jLXBja3F
"""

import requests
import time
import logging
import smtplib
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart
import schedule

# Configure logging
logging.basicConfig(filename="website_monitor.log", level=logging.INFO, format="%(asctime)s - %(message)s")

# List of URLs to monitor
URLS = ["https://uok.ac.rw", "https://example.com", "https://google.com"]

# Email configuration
SENDER_EMAIL = "dahdiall8@gmail.com"  # Replace with your email
SENDER_PASSWORD = "dahd8iall100#"  # Replace with your email password or app-specific password
RECIPIENT_EMAIL = "oumardiall868@gmail.com"

def send_alert(message):
    """Send an email alert"""
    try:
        # Set up the MIME
        msg = MIMEMultipart()
        msg['From'] = SENDER_EMAIL
        msg['To'] = RECIPIENT_EMAIL
        msg['Subject'] = "Website Monitoring Alert"

        # Add message body
        msg.attach(MIMEText(message, 'plain'))

        # Establish a connection to the Gmail SMTP server
        with smtplib.SMTP_SSL('smtp.gmail.com', 465) as server:
            server.login(SENDER_EMAIL, SENDER_PASSWORD)
            text = msg.as_string()
            server.sendmail(SENDER_EMAIL, RECIPIENT_EMAIL, text)
        print(f"ALERT email sent to {RECIPIENT_EMAIL}")
    except Exception as e:
        print(f"Error sending email: {e}")
        logging.error(f"Error sending email: {e}")

def check_website(url):
    """Check website status and log results"""
    try:
        response = requests.get(url, timeout=5)
        response_time = response.elapsed.total_seconds()

        if response.status_code == 200:
            print(f"✅ {url} is UP (Response Time: {response_time:.2f}s)")
            logging.info(f"{url} is UP (Response Time: {response_time:.2f}s)")
        else:
            print(f"⚠️ {url} returned status {response.status_code}")
            logging.warning(f"{url} returned status {response.status_code}")
            send_alert(f"{url} returned status {response.status_code}")

    except requests.exceptions.RequestException as e:
        print(f"❌ {url} is DOWN! Error: {e}")
        logging.error(f"{url} is DOWN! Error: {e}")
        send_alert(f"{url} is DOWN! Error: {e}")

def monitor_websites():
    """Check all websites in the list"""
    for url in URLS:
        check_website(url)

# Schedule checks every 5 minutes
schedule.every(5).minutes.do(monitor_websites)

# Run indefinitely
if __name__ == "__main__":
    print("Website monitoring started...")
import requests
import time
import logging
import smtplib
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart
import schedule

# Configure logging
logging.basicConfig(filename="website_monitor.log", level=logging.INFO, format="%(asctime)s - %(message)s")

# List of URLs to monitor
URLS = ["https://uok.ac.rw", "https://example.com", "https://google.com"]

# Email configuration
SENDER_EMAIL = "dahdiall8@gmail.com"  # Replace with your email
SENDER_PASSWORD = "dahd8iall100#"  # Replace with your email password or app-specific password
RECIPIENT_EMAIL = "oumardiall868@gmail.com"

def send_alert(message):
    """Send an email alert"""
    try:
        # Set up the MIME
        msg = MIMEMultipart()
        msg['From'] = SENDER_EMAIL
        msg['To'] = RECIPIENT_EMAIL
        msg['Subject'] = "Website Monitoring Alert"

        # Add message body
        msg.attach(MIMEText(message, 'plain'))

        # Establish a connection to the Gmail SMTP server
        with smtplib.SMTP_SSL('smtp.gmail.com', 465) as server:
            server.login(SENDER_EMAIL, SENDER_PASSWORD)
            text = msg.as_string()
            server.sendmail(SENDER_EMAIL, RECIPIENT_EMAIL, text)
        print(f"ALERT email sent to {RECIPIENT_EMAIL}")
    except Exception as e:
        print(f"Error sending email: {e}")
        logging.error(f"Error sending email: {e}")

def check_website(url):
    """Check website status and log results"""
    try:
        response = requests.get(url, timeout=5)
        response_time = response.elapsed.total_seconds()

        if response.status_code == 200:
            print(f"✅ {url} is UP (Response Time: {response_time:.2f}s)")
            logging.info(f"{url} is UP (Response Time: {response_time:.2f}s)")
        else:
            print(f"⚠️ {url} returned status {response.status_code}")
            logging.warning(f"{url} returned status {response.status_code}")
            send_alert(f"{url} returned status {response.status_code}")

    except requests.exceptions.RequestException as e:
        print(f"❌ {url} is DOWN! Error: {e}")
        logging.error(f"{url} is DOWN! Error: {e}")
        send_alert(f"{url} is DOWN! Error: {e}")

def monitor_websites():
    """Check all websites in the list"""
    for url in URLS:
        check_website(url)

# Schedule checks every 5 minutes
schedule.every(5).minutes.do(monitor_websites)

# Run indefinitely
if __name__ == "__main__":
    print("Website monitoring started...")
    while True:
        schedule.run_pending()
        time.sleep(1)